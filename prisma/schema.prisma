datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String  @id @default(cuid())
  email String  @unique
  name  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  verified Boolean @default(false)
  locked   Boolean @default(false)
  theme    String?

  password Password?
  bands    UsersInBands[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Token {
  hash      String
  userId    String   @unique
  createdAt DateTime @default(now())
}

model LoginAttempts {
  userId    String   @unique
  attempts  Int
  createdAt DateTime @default(now())
}

model Band {
  id   String @id @default(cuid())
  name String
  code String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  setlists Setlist[]
  members  UsersInBands[]

  icon  BandIcon?
  feels Feel[]
  song  Song[]
}

model UsersInBands {
  user     User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  bandName String
  band     Band?  @relation(fields: [bandId], references: [id], onDelete: Cascade)
  bandId   String
  role     String

  @@id([userId, bandId])
}

model BandIcon {
  id              String  @id @default(cuid())
  path            String?
  backgroundColor String?
  textColor       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  band   Band   @relation(fields: [bandId], references: [id], onDelete: Cascade)
  bandId String @unique
}

model Setlist {
  id           String  @id @default(cuid())
  editedFromId String?
  name         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  band   Band   @relation(fields: [bandId], references: [id], onDelete: Cascade)
  bandId String
  sets   Set[]
}

model Set {
  id String @id @default(cuid())

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  positionInSetlist Int      @default(0)

  setlist   Setlist?      @relation(fields: [setlistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  setlistId String
  songs     SongsInSets[]
}

model SongsInSets {
  song          Song?  @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId        String
  positionInSet Int
  set           Set?   @relation(fields: [setId], references: [id], onDelete: Cascade)
  setId         String

  @@id([songId, setId])
}

model Song {
  id        String  @id @default(cuid())
  name      String
  length    Int
  isCover   Boolean @default(false)
  note      String?
  keyLetter String?
  isMinor   Boolean @default(false)
  tempo     Int
  position  String
  rank      String
  feels     Feel[]

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  band      Band?         @relation(fields: [bandId], references: [id], onDelete: Cascade)
  bandId    String?
  sets      SongsInSets[]
}

model Feel {
  id    String  @id @default(cuid())
  label String
  color String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  songs     Song[]

  band   Band   @relation(fields: [bandId], references: [id], onDelete: Cascade)
  bandId String
}
