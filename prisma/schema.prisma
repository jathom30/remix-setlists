datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String  @id @default(cuid())
  email String  @unique
  name  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  bands    UsersInBands[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Band {
  id   String @id @default(cuid())
  name String
  code String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  setlists Setlist[]
  songs    Song[]
  members  UsersInBands[]

  icon  BandIcon?
  feels Feel[]
}

model UsersInBands {
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  bandName String
  band     Band   @relation(fields: [bandId], references: [id])
  bandId   String
  role     String

  @@id([userId, bandId])
}

model BandIcon {
  id              String  @id @default(cuid())
  path            String?
  backgroundColor String?
  textColor       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  band   Band   @relation(fields: [bandId], references: [id])
  bandId String @unique
}

model Setlist {
  id        String @id @default(cuid())
  name      String
  updatedBy String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  band   Band   @relation(fields: [bandId], references: [id])
  bandId String
  sets   Set[]
}

model Set {
  id     String @id @default(cuid())
  length Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  setlist   Setlist @relation(fields: [setlistId], references: [id])
  setlistId String
  songs     Song[]
}

model Song {
  id        String  @id @default(cuid())
  name      String
  length    Int
  isCover   Boolean @default(false)
  note      String?
  keyLetter String?
  isMinor   Boolean @default(false)
  tempo     Int
  position  String
  rank      String
  feels     Feel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sets      Set[]
  band      Band?    @relation(fields: [bandId], references: [id])
  bandId    String?
}

model Feel {
  id    String  @id @default(cuid())
  label String
  color String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  song      Song?    @relation(fields: [songId], references: [id])
  songId    String?

  band   Band   @relation(fields: [bandId], references: [id])
  bandId String
}
